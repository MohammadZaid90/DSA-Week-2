   								lab 2

QUESTION # 1:

class Solution {
public:
    bool isValid(string s) {
        stack<char> temp;

        for (int i = 0 ; i<s.length(); i++)
        {
            if (temp.empty())
            {
                temp.push(s[i]);
            }
            else if (temp.top() == '(' && s[i] == ')' || temp.top() == '{' && s[i] == '}' ||                    temp.top() == '[' && s[i] == ']')
            {
                temp.pop();
            }
            else
            {
                temp.push(s[i]);
            }
        }
        if (temp.empty())
        {
            return true;
        }
        return false;
    }
};


Question # 2:

class MinStack {
private:
	stack<int> s1;
	stack<int> s2;
public:
    MinStack() {
        s2.push(INT_MAX);
    }

    void push(int val) {
        s1.push(val);
        if (val < s2.top())
        {
            s2.push(val);
        }
        else if(val >= s2.top())
        {
            s2.push(s2.top());
        }
        //s2.push(min(val, s2.top()));
    }

    void pop() {
        s1.pop();
        s2.pop();
    }

    int top() {
        return s1.top();
    }

    int getMin() {
        return s2.top();
    }
};



QUESTION # 5:

class Solution {
public:
    int maxArea(vector<int>& height) {
        int res = 0, i = 0, j = height.size() - 1, ans = 0;
        while (i < j)
        {
            if (height[i] <= height[j])
            {
                res = height[i] * (j - i);
                i++;
            }
            else
            {
                res = height[j] * (j - i);
                j--;
            }
            if (res > ans)
            {
                ans = res;
            }
        }
        return ans;
    }
};



QUESTION # 6:

class MyStack
{
private:
	queue<int> q1;
	queue<int> q2;

public:

    void push(int x) {
        q2.push(x);
        while (!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1, q2);
    }

    int pop() {
        int x = q1.front();
        q1.pop();
        return x;
    }

    int top() {
        return q1.front();
    }

    bool empty() {
        return q1.empty();
    }
};



QUESTION # 8:


class FrontMiddleBackQueue {

    vector<int> v;
public:
    FrontMiddleBackQueue() {
        
    }
    
    void pushFront(int val) {
        v.insert(v.begin(),val);
    }
    
    void pushMiddle(int val) {
        int mid = (v.size())/2;
        v.insert(v.begin()+mid,val);
    }
    
    void pushBack(int val) {
        v.push_back(val);
    }
    
    int popFront() {
        if(v.size() == 0)
        {
            return -1;
        }
            int c = v[0];
            v.erase(v.begin());
            return c;
        
    }
    
    int popMiddle() {

        if(v.size() == 0)
        {
            return -1;
        }
            int mid = (v.size() - 1)/2;
            int c = v[mid];
            v.erase(v.begin()+mid);
            return c;
    }
    
    int popBack() {
        if(v.size() == 0)
        {
            return -1;
        }
            int c = v[v.size()-1];
            v.pop_back();
            return c;
        }
    };
